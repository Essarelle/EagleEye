cmake_minimum_required(VERSION 2.8)

project(EagleEye)
SET(BIN_DIRS "" CACHE STRING "" FORCE)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

find_package(CUDA REQUIRED)
  include_directories(${CUDA_INCLUDE_DIRS})
#find_package(Eigen3 REQUIRED)
#  include_directories(${EIGEN_INCLUDE_DIRS})
macro(ocv_parse_header FILENAME FILE_VAR)
  set(vars_regex "")
  set(__parnet_scope OFF)
  set(__add_cache OFF)
  foreach(name ${ARGN})
    if("${name}" STREQUAL "PARENT_SCOPE")
      set(__parnet_scope ON)
    elseif("${name}" STREQUAL "CACHE")
      set(__add_cache ON)
    elseif(vars_regex)
      set(vars_regex "${vars_regex}|${name}")
    else()
      set(vars_regex "${name}")
    endif()
  endforeach()
  if(EXISTS "${FILENAME}")
    file(STRINGS "${FILENAME}" ${FILE_VAR} REGEX "#define[ \t]+(${vars_regex})[ \t]+[0-9]+" )
  else()
    unset(${FILE_VAR})
  endif()
  foreach(name ${ARGN})
    if(NOT "${name}" STREQUAL "PARENT_SCOPE" AND NOT "${name}" STREQUAL "CACHE")
      if(${FILE_VAR})
        if(${FILE_VAR} MATCHES ".+[ \t]${name}[ \t]+([0-9]+).*")
          string(REGEX REPLACE ".+[ \t]${name}[ \t]+([0-9]+).*" "\\1" ${name} "${${FILE_VAR}}")
        else()
          set(${name} "")
        endif()
        if(__add_cache)
          set(${name} ${${name}} CACHE INTERNAL "${name} parsed from ${FILENAME}" FORCE)
        elseif(__parnet_scope)
          set(${name} "${${name}}" PARENT_SCOPE)
        endif()
      else()
        unset(${name} CACHE)
      endif()
    endif()
  endforeach()
endmacro()
#find_path(EIGEN_INCLUDE_PATH "Eigen/Core"
#		PATHS /usr/local /opt /usr $ENV{EIGEN_ROOT}/include ENV ProgramFiles ENV ProgramW6432
#		PATH_SUFFIXES include/eigen3 include/eigen2 Eigen/include/eigen3 Eigen/include/eigen2
#		DOC "The path to Eigen3/Eigen2 headers"
#		CMAKE_FIND_ROOT_PATH_BOTH
#)

#if(EIGEN_INCLUDE_PATH)
#  include_directories(${EIGEN_INCLUDE_PATH})
#  ocv_parse_header("${EIGEN_INCLUDE_PATH}/Eigen/src/Core/util/Macros.h"
#    EIGEN_VERSION_LINES
#    EIGEN_WORLD_VERSION
#    EIGEN_MAJOR_VERSION
#    EIGEN_MINOR_VERSION
#  )
#endif()


set(PROJECT_BIN_DIRS_DEBUG "" CACHE PATH "" FORCE)
set(PROJECT_BIN_DIRS_RELWITHDEBINFO "" CACHE PATH "" FORCE)
set(PROJECT_BIN_DIRS_RELEASE "" CACHE PATH "" FORCE)
CMAKE_POLICY(SET CMP0020 NEW)
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_CURRENT_SOURCE_DIR}/cmake")
SET(CMAKE_CONFIGURATION_TYPES "Debug;Release")

SET(CMAKE_DEBUG_POSTFIX "d")
STRING(TOUPPER "${CMAKE_BUILD_TYPE}" _BUILD_TYPE)
include("cmake/FindNVToolsExt.cmake")
include("cmake/Utils.cmake")

IF(WIN32)
  set(Boost_USE_STATIC_LIBS        OFF)
  set(Boost_USE_MULTITHREADED      ON)
  set(Boost_USE_STATIC_RUNTIME     OFF)
  ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
  ADD_DEFINITIONS(-D_ENABLE_ATOMIC_ALIGNMENT_FIX)
ELSE(WIN32)
  set(Boost_USE_STATIC_LIBS        OFF)
  set(Boost_USE_MULTITHREADED      ON)
  set(Boost_USE_STATIC_RUNTIME     OFF)
  ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
ENDIF(WIN32)

IF(WIN32)
  add_definitions(-DWIN32)
  add_definitions(-D_WIN32)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")

  SET(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo")
  SET(CMAKE_CXX_FLAGS "/FS /EHsc /FC /Zo /d2Zi+ /Zi /MP /Zm512 /bigobj" CACHE STRING "")
  SET(CMAKE_CXX_FLAGS_DEBUG "/MDd /Od" CACHE STRING "")
  SET(CMAKE_CXX_FLAGS_RELEASE "/MD /O2 /Ob1 /D /Oy- NDEBUG" CACHE STRING "")
  SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MD /O2 /Oy-" CACHE STRING "")
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
  ADD_DEFINITIONS(-D_WIN32_WINNT=0x0601)
ELSE(WIN32)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/Plugins")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wno-reorder -Wno-sign-compare -O0")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fno-omit-frame-pointer")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fPIC -g -Wl,--no-as-needed")
  set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
  set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")
  SET(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin/Plugins" CACHE PATH "Library output path" FORCE)
  SET(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin" CACHE PATH "Executable output path" FORCE)
ENDIF(WIN32)

SET(Aquila_JETSON FALSE CACHE BOOL "True if building for jetson platform")
add_subdirectory(Aquila)

include_directories(${MetaObject_INCLUDE_DIRS})
SET(LINK_DIRS ${Aquila_LIB_DIRS_RELEASE})
SET(LINK_DIRS_RELEASE ${Aquila_LIB_DIRS_RELEASE})
SET(LINK_DIRS_DEBUG ${Aquila_LIB_DIRS_DEBUG})
set(PROJECT_BIN_DIRS_DEBUG ${BOOST_LIBRARYDIR})
set(PROJECT_BIN_DIRS_RELEASE ${BOOST_LIBRARYDIR})
SET(INCLUDE_DIRS ${Aquila_INCLUDE_DIRECTORIES};${MetaObject_INCLUDE_DIRS})
SET(LINK_LIBS ${Aquila_LIBRARIES})
SET(DEFS ${Aquila_DEFS};-DBOOST_ALL_DYN_LINK)

LINK_DIRECTORIES(${LINK_DIRS_DEBUG})
LINK_DIRECTORIES(${LINK_DIRS_RELEASE})
INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

add_subdirectory(EagleEye)
add_subdirectory(Plugins)
add_subdirectory(samples)
add_subdirectory(tests)

